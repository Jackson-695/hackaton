import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from PIL import Image, ImageTk
import cv2
import numpy as np
import os
import threading
import time

class AdvancedSegmentationApp:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å AI —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    
    def __init__(self, root, segmentator):
        self.root = root
        self.segmentator = segmentator
        self.current_image = None
        self.custom_background = None
        self.background_generator = None
        self.style_classifier = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.setup_ai_components()
        self.setup_ui()
        
    def setup_ai_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ–Ω–µ"""
        def load_ai_components():
            try:
                from background_generator import BackgroundGenerator
                from style_classifier import StyleClassifier
                self.background_generator = BackgroundGenerator()
                self.style_classifier = StyleClassifier()
                print("‚úÖ AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å GUI
        ai_thread = threading.Thread(target=load_ai_components, daemon=True)
        ai_thread.start()
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.root.title("üß† AI Human Segmentation - PRO EDITION")
        self.root.geometry("1400x900")
        self.root.configure(bg="#1e1e1e")
        
        # –°—Ç–∏–ª–∏
        self.setup_styles()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_header()
        self.create_main_content()
        self.create_status_bar()
        
        # –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        self.animate_loading()
    
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.style = ttk.Style()
        self.style.configure("Custom.TFrame", background="#2d2d30")
        self.style.configure("Title.TLabel", 
                           background="#1e1e1e", 
                           foreground="#ffffff",
                           font=("Arial", 16, "bold"))
        self.style.configure("Subtitle.TLabel",
                           background="#1e1e1e",
                           foreground="#cccccc", 
                           font=("Arial", 10))
        
        # –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        self.style.configure("Primary.TButton",
                           background="#007acc",
                           foreground="white",
                           font=("Arial", 10, "bold"),
                           padding=(15, 8))
        
        self.style.configure("Success.TButton",
                           background="#107c10", 
                           foreground="white",
                           font=("Arial", 10, "bold"),
                           padding=(15, 8))
        
        self.style.configure("Warning.TButton",
                           background="#d83b01",
                           foreground="white", 
                           font=("Arial", 10, "bold"),
                           padding=(15, 8))
    
    def create_header(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        header_frame = ttk.Frame(self.root, style="Custom.TFrame")
        header_frame.pack(fill=tk.X, padx=20, pady=15)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π
        title_frame = ttk.Frame(header_frame, style="Custom.TFrame")
        title_frame.pack(fill=tk.X)
        
        title_label = ttk.Label(title_frame, 
                               text="üß† AI HUMAN SEGMENTATION PRO", 
                               style="Title.TLabel")
        title_label.pack(side=tk.LEFT)
        
        # –í–µ—Ä—Å–∏—è –∏ —Å—Ç–∞—Ç—É—Å
        version_label = ttk.Label(title_frame,
                                 text="v2.0 | Neural Network Powered",
                                 style="Subtitle.TLabel")
        version_label.pack(side=tk.RIGHT)
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ñ–∏—á–∞–º–∏
        features = "üéØ Real-time Segmentation ‚Ä¢ üé® AI Background Generation ‚Ä¢ üëî Style Detection ‚Ä¢ ‚ö° GPU Accelerated"
        features_label = ttk.Label(header_frame,
                                  text=features,
                                  style="Subtitle.TLabel")
        features_label.pack(fill=tk.X, pady=(5, 0))
    
    def create_main_content(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        main_frame = ttk.Frame(self.root, style="Custom.TFrame")
        main_frame.pack(expand=True, fill=tk.BOTH, padx=20, pady=10)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        self.create_control_panel(main_frame)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.create_image_panel(main_frame)
    
    def create_control_panel(self, parent):
        """–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        control_frame = ttk.LabelFrame(parent, 
                                      text="üéõÔ∏è CONTROL PANEL",
                                      style="Custom.TFrame",
                                      padding=15)
        control_frame.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 10))
        control_frame.config(width=350)
        
        # –°–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        self.create_load_section(control_frame)
        
        # –°–µ–∫—Ü–∏—è —Ñ–æ–Ω–æ–≤
        self.create_background_section(control_frame)
        
        # –°–µ–∫—Ü–∏—è AI —Ñ—É–Ω–∫—Ü–∏–π
        self.create_ai_section(control_frame)
        
        # –°–µ–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.create_settings_section(control_frame)
    
    def create_load_section(self, parent):
        """–°–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        load_frame = ttk.LabelFrame(parent, text="üìÅ LOAD IMAGE", padding=10)
        load_frame.pack(fill=tk.X, pady=(0, 15))
        
        btn_load = ttk.Button(load_frame, 
                             text="üìÅ CHOOSE IMAGE", 
                             command=self.load_image,
                             style="Primary.TButton")
        btn_load.pack(fill=tk.X, pady=5)
        
        btn_camera = ttk.Button(load_frame,
                               text="üì∑ OPEN CAMERA",
                               command=self.open_camera,
                               style="Primary.TButton")
        btn_camera.pack(fill=tk.X, pady=5)
        
        btn_demo = ttk.Button(load_frame,
                             text="üé® LOAD DEMO",
                             command=self.load_demo,
                             style="Success.TButton")
        btn_demo.pack(fill=tk.X, pady=5)
    
    def create_background_section(self, parent):
        """–°–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ñ–æ–Ω–∞"""
        bg_frame = ttk.LabelFrame(parent, text="üé® BACKGROUND", padding=10)
        bg_frame.pack(fill=tk.X, pady=(0, 15))
        
        # –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–µ—Å–µ—Ç—ã —Ñ–æ–Ω–æ–≤
        presets_frame = ttk.Frame(bg_frame)
        presets_frame.pack(fill=tk.X, pady=5)
        
        backgrounds = [
            ("üîµ Blue", "blue"),
            ("üü¢ Green", "green"), 
            ("üåà Gradient", "gradient"),
            ("‚ö´ Black", "black"),
            ("üåÄ Blur", "blur")
        ]
        
        for text, bg_type in backgrounds:
            btn = ttk.Button(presets_frame,
                           text=text,
                           command=lambda bt=bg_type: self.process_image(bt),
                           style="Primary.TButton")
            btn.pack(fill=tk.X, pady=2)
        
        # –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ–Ω
        custom_frame = ttk.Frame(bg_frame)
        custom_frame.pack(fill=tk.X, pady=(10, 0))
        
        btn_custom_bg = ttk.Button(custom_frame,
                                  text="üñºÔ∏è CUSTOM BACKGROUND",
                                  command=self.load_custom_background,
                                  style="Warning.TButton")
        btn_custom_bg.pack(fill=tk.X)
    
    def create_ai_section(self, parent):
        """–°–µ–∫—Ü–∏—è AI —Ñ—É–Ω–∫—Ü–∏–π"""
        ai_frame = ttk.LabelFrame(parent, text="ü§ñ AI FUNCTIONS", padding=10)
        ai_frame.pack(fill=tk.X, pady=(0, 15))
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ–Ω–∞ –ø–æ –ø—Ä–æ–º–ø—Ç—É
        prompt_frame = ttk.Frame(ai_frame)
        prompt_frame.pack(fill=tk.X, pady=5)
        
        ttk.Label(prompt_frame, text="AI Prompt:").pack(anchor=tk.W)
        
        self.prompt_var = tk.StringVar(value="modern office background")
        prompt_entry = ttk.Entry(prompt_frame, textvariable=self.prompt_var, width=30)
        prompt_entry.pack(fill=tk.X, pady=2)
        
        btn_generate = ttk.Button(prompt_frame,
                                text="üé® GENERATE BACKGROUND",
                                command=self.generate_background_from_prompt,
                                style="Success.TButton")
        btn_generate.pack(fill=tk.X, pady=2)
        
        # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è
        btn_auto_style = ttk.Button(ai_frame,
                                  text="üëî AUTO DETECT STYLE",
                                  command=self.auto_detect_style,
                                  style="Primary.TButton")
        btn_auto_style.pack(fill=tk.X, pady=5)
        
        # –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        btn_batch = ttk.Button(ai_frame,
                             text="üì¶ BATCH PROCESSING",
                             command=self.batch_processing,
                             style="Warning.TButton")
        btn_batch.pack(fill=tk.X, pady=5)
    
    def create_settings_section(self, parent):
        """–°–µ–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings_frame = ttk.LabelFrame(parent, text="‚öôÔ∏è SETTINGS", padding=10)
        settings_frame.pack(fill=tk.X)
        
        # –ö–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        quality_frame = ttk.Frame(settings_frame)
        quality_frame.pack(fill=tk.X, pady=5)
        
        ttk.Label(quality_frame, text="Quality:").pack(side=tk.LEFT)
        
        self.quality_var = tk.StringVar(value="balanced")
        quality_combo = ttk.Combobox(quality_frame, 
                                    textvariable=self.quality_var,
                                    values=["fast", "balanced", "high"],
                                    state="readonly",
                                    width=12)
        quality_combo.pack(side=tk.RIGHT)
        quality_combo.bind('<<ComboboxSelected>>', self.on_quality_change)
        
        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        self.auto_save_var = tk.BooleanVar(value=True)
        auto_save_cb = ttk.Checkbutton(settings_frame,
                                      text="Auto-save results",
                                      variable=self.auto_save_var)
        auto_save_cb.pack(anchor=tk.W, pady=2)
        
        # –ü–æ–∫–∞–∑ –º–∞—Å–∫–∏
        self.show_mask_var = tk.BooleanVar(value=False)
        show_mask_cb = ttk.Checkbutton(settings_frame,
                                      text="Show segmentation mask",
                                      variable=self.show_mask_var)
        show_mask_cb.pack(anchor=tk.W, pady=2)
    
    def create_image_panel(self, parent):
        """–ü–∞–Ω–µ–ª—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        image_frame = ttk.Frame(parent, style="Custom.TFrame")
        image_frame.pack(side=tk.RIGHT, expand=True, fill=tk.BOTH)
        
        # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.original_frame = ttk.LabelFrame(image_frame, 
                                           text="üì∏ ORIGINAL IMAGE",
                                           padding=10)
        self.original_frame.pack(side=tk.LEFT, expand=True, fill=tk.BOTH, padx=(0, 5))
        
        self.original_canvas = tk.Canvas(self.original_frame, 
                                        bg="#2d2d30", 
                                        highlightthickness=0)
        self.original_canvas.pack(expand=True, fill=tk.BOTH)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        self.result_frame = ttk.LabelFrame(image_frame, 
                                         text="üéØ AI RESULT", 
                                         padding=10)
        self.result_frame.pack(side=tk.RIGHT, expand=True, fill=tk.BOTH, padx=(5, 0))
        
        self.result_canvas = tk.Canvas(self.result_frame, 
                                      bg="#2d2d30", 
                                      highlightthickness=0)
        self.result_canvas.pack(expand=True, fill=tk.BOTH)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.show_placeholder(self.original_canvas, "Load an image to start")
        self.show_placeholder(self.result_canvas, "AI result will appear here")
    
    def create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞"""
        status_frame = ttk.Frame(self.root, style="Custom.TFrame", height=30)
        status_frame.pack(fill=tk.X, side=tk.BOTTOM)
        status_frame.pack_propagate(False)
        
        # –°—Ç–∞—Ç—É—Å AI
        self.ai_status_var = tk.StringVar(value="üü¢ AI Systems: Initializing...")
        ai_status_label = ttk.Label(status_frame, 
                                   textvariable=self.ai_status_var,
                                   style="Subtitle.TLabel")
        ai_status_label.pack(side=tk.LEFT, padx=10)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_var = tk.DoubleVar()
        progress_bar = ttk.Progressbar(status_frame, 
                                      variable=self.progress_var,
                                      mode='determinate')
        progress_bar.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=10)
        
        # –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.status_var = tk.StringVar(value="Ready")
        status_label = ttk.Label(status_frame, 
                                textvariable=self.status_var,
                                style="Subtitle.TLabel")
        status_label.pack(side=tk.RIGHT, padx=10)
    
    def animate_loading(self):
        """–ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏"""
        def update_loading():
            for i in range(101):
                self.progress_var.set(i)
                self.ai_status_var.set(f"üü° AI Systems: Loading... {i}%")
                time.sleep(0.02)
                self.root.update()
            
            self.ai_status_var.set("üü¢ AI Systems: Ready!")
            self.progress_var.set(0)
        
        loading_thread = threading.Thread(target=update_loading, daemon=True)
        loading_thread.start()
    
    def show_placeholder(self, canvas, text):
        """–ü–æ–∫–∞–∑ –∑–∞–≥–ª—É—à–∫–∏ –Ω–∞ canvas"""
        canvas.delete("all")
        width = canvas.winfo_width()
        height = canvas.winfo_height()
        
        if width > 1 and height > 1:  # –ï—Å–ª–∏ canvas —É–∂–µ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω
            canvas.create_text(width//2, height//2, 
                             text=text, 
                             fill="#666666",
                             font=("Arial", 12),
                             justify=tk.CENTER)
    
    def load_image(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        file_path = filedialog.askopenfilename(
            title="Select Image",
            filetypes=[
                ("Image files", "*.jpg *.jpeg *.png *.bmp"),
                ("JPEG files", "*.jpg *.jpeg"),
                ("PNG files", "*.png"),
                ("All files", "*.*")
            ]
        )
        
        if file_path:
            try:
                self.status_var.set("üìÅ Loading image...")
                self.root.update()
                
                self.current_image = file_path
                image = Image.open(file_path)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                self.display_image_on_canvas(image, self.original_canvas)
                self.status_var.set(f"‚úÖ Loaded: {os.path.basename(file_path)}")
                
            except Exception as e:
                messagebox.showerror("Error", f"Cannot load image: {e}")
                self.status_var.set("‚ùå Load failed")
    
    def load_custom_background(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ñ–æ–Ω–∞"""
        file_path = filedialog.askopenfilename(
            title="Select Background Image",
            filetypes=[("Image files", "*.jpg *.jpeg *.png *.bmp")]
        )
        
        if file_path:
            try:
                self.custom_background = file_path
                self.status_var.set(f"üé® Custom background loaded")
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
                if self.current_image:
                    self.process_image("custom")
                    
            except Exception as e:
                messagebox.showerror("Error", f"Cannot load background: {e}")
    
    def open_camera(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞–º–µ—Ä—ã"""
        try:
            from video_processor import SmartVideoProcessor
            
            model_path = 'improved_model.pth' if os.path.exists('improved_model.pth') else None
            processor = SmartVideoProcessor(model_path=model_path)
            
            self.status_var.set("üìπ Starting camera...")
            
            # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            def run_camera():
                processor.start_webcam()
            
            camera_thread = threading.Thread(target=run_camera, daemon=True)
            camera_thread.start()
            
        except Exception as e:
            messagebox.showerror("Error", f"Cannot open camera: {e}")
    
    def load_demo(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ –ø—Ä–∏–º–µ—Ä–∞"""
        try:
            from model import create_demo_image
            import cv2
            
            self.status_var.set("üé® Creating demo...")
            self.root.update()
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            demo_img = create_demo_image()
            cv2.imwrite("demo_human.jpg", demo_img)
            
            self.current_image = "demo_human.jpg"
            image = Image.open("demo_human.jpg")
            self.display_image_on_canvas(image, self.original_canvas)
            self.status_var.set("üé® Demo loaded - Choose background!")
            
        except Exception as e:
            messagebox.showerror("Error", f"Demo failed: {e}")
            self.status_var.set("‚ùå Demo failed")
    
    def process_image(self, background_type):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not hasattr(self, 'current_image'):
            messagebox.showwarning("Warning", "Please load an image first")
            return
        
        # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def process_thread():
            try:
                self.status_var.set("üß† AI Processing...")
                self.progress_var.set(30)
                self.root.update()
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ AI
                custom_bg = self.custom_background if background_type == "custom" else None
                mask, result = self.segmentator.process_image(
                    self.current_image, background_type, custom_bg
                )
                
                self.progress_var.set(70)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                result_bgr = cv2.cvtColor(result, cv2.COLOR_RGB2BGR)
                result_pil = Image.fromarray(result_bgr)
                
                # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                self.display_image_on_canvas(result_pil, self.result_canvas)
                
                # –ü–æ–∫–∞–∑ –º–∞—Å–∫–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                if self.show_mask_var.get():
                    mask_pil = Image.fromarray(mask)
                    self.show_mask_preview(mask_pil)
                
                self.progress_var.set(100)
                self.status_var.set(f"‚úÖ Processed with {background_type} background")
                
                # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                if self.auto_save_var.get():
                    self.auto_save_result(result_bgr, background_type)
                
                self.progress_var.set(0)
                
            except Exception as e:
                self.status_var.set("‚ùå Processing failed")
                messagebox.showerror("Error", f"AI processing failed: {e}")
                self.progress_var.set(0)
        
        thread = threading.Thread(target=process_thread, daemon=True)
        thread.start()
    
    def generate_background_from_prompt(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ–Ω–∞ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –ø—Ä–æ–º–ø—Ç—É"""
        if not hasattr(self, 'current_image'):
            messagebox.showwarning("Warning", "Please load an image first")
            return
        
        prompt = self.prompt_var.get().strip()
        if not prompt:
            messagebox.showwarning("Warning", "Please enter a prompt for background generation")
            return
        
        if self.background_generator is None:
            messagebox.showwarning("Warning", "Background generator is still loading...")
            return
        
        def generate_thread():
            try:
                self.status_var.set("üé® Generating background...")
                self.progress_var.set(20)
                self.root.update()
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ–Ω–∞
                background = self.background_generator.generate_from_prompt(prompt, size=(512, 512))
                
                self.progress_var.set(50)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–ª—è OpenCV
                background_cv = cv2.cvtColor(np.array(background), cv2.COLOR_RGB2BGR)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ñ–æ–Ω–æ–º
                mask, result = self.segmentator.process_image(
                    self.current_image, "custom", custom_background=background_cv
                )
                
                self.progress_var.set(80)
                
                # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                result_bgr = cv2.cvtColor(result, cv2.COLOR_RGB2BGR)
                result_pil = Image.fromarray(result_bgr)
                self.display_image_on_canvas(result_pil, self.result_canvas)
                
                self.progress_var.set(100)
                self.status_var.set(f"‚úÖ Generated: {prompt}")
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                if self.auto_save_var.get():
                    cv2.imwrite(f"outputs/generated_{prompt[:20]}.jpg", result_bgr)
                
                self.progress_var.set(0)
                
            except Exception as e:
                self.status_var.set("‚ùå Generation failed")
                messagebox.showerror("Error", f"Background generation failed: {e}")
                self.progress_var.set(0)
        
        thread = threading.Thread(target=generate_thread, daemon=True)
        thread.start()
    
    def auto_detect_style(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è –∏ –ø–æ–¥–±–æ—Ä —Ñ–æ–Ω–∞"""
        if not hasattr(self, 'current_image'):
            messagebox.showwarning("Warning", "Please load an image first")
            return
        
        if self.style_classifier is None:
            messagebox.showwarning("Warning", "Style classifier is still loading...")
            return
        
        def detect_style_thread():
            try:
                self.status_var.set("üëî Analyzing style...")
                self.progress_var.set(30)
                self.root.update()
                
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è
                recommended_bg, style, confidence = self.style_classifier.get_recommended_background(
                    self.current_image
                )
                
                self.progress_var.set(60)
                
                # –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞ —Ç–∏–ø—ã —Ñ–æ–Ω–æ–≤
                bg_mapping = {
                    "–æ—Ñ–∏—Å": "gradient",
                    "–∫–∞—Ñ–µ": "green", 
                    "—Å–ø–æ—Ä—Ç–∑–∞–ª": "blue",
                    "—Ç–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π": "gradient",
                    "–≥–æ—Ä–æ–¥": "black",
                    "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π": "blue"
                }
                
                background_type = bg_mapping.get(recommended_bg, "blue")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–º —Ñ–æ–Ω–æ–º
                mask, result = self.segmentator.process_image(self.current_image, background_type)
                
                self.progress_var.set(90)
                
                # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                result_bgr = cv2.cvtColor(result, cv2.COLOR_RGB2BGR)
                result_pil = Image.fromarray(result_bgr)
                self.display_image_on_canvas(result_pil, self.result_canvas)
                
                self.progress_var.set(100)
                self.status_var.set(f"‚úÖ Style: {style} ‚Üí {recommended_bg} (confidence: {confidence:.2f})")
                
                self.progress_var.set(0)
                
            except Exception as e:
                self.status_var.set("‚ùå Style detection failed")
                messagebox.showerror("Error", f"Style detection failed: {e}")
                self.progress_var.set(0)
        
        thread = threading.Thread(target=detect_style_thread, daemon=True)
        thread.start()
    
    def batch_processing(self):
        """–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        files = filedialog.askopenfilenames(
            title="Select Multiple Images",
            filetypes=[("Image files", "*.jpg *.jpeg *.png *.bmp")]
        )
        
        if not files:
            return
        
        def batch_process_thread():
            try:
                total = len(files)
                for i, file_path in enumerate(files):
                    self.status_var.set(f"üì¶ Processing {i+1}/{total}...")
                    self.progress_var.set((i / total) * 100)
                    self.root.update()
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
                    mask, result = self.segmentator.process_image(file_path, "gradient")
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                    base_name = os.path.basename(file_path).split('.')[0]
                    result_path = f"outputs/batch_{base_name}_result.jpg"
                    cv2.imwrite(result_path, cv2.cvtColor(result, cv2.COLOR_RGB2BGR))
                
                self.progress_var.set(100)
                self.status_var.set(f"‚úÖ Batch processed {total} images")
                self.progress_var.set(0)
                
                messagebox.showinfo("Complete", f"Successfully processed {total} images!")
                
            except Exception as e:
                self.status_var.set("‚ùå Batch processing failed")
                messagebox.showerror("Error", f"Batch processing failed: {e}")
                self.progress_var.set(0)
        
        thread = threading.Thread(target=batch_process_thread, daemon=True)
        thread.start()
    
    def display_image_on_canvas(self, image, canvas):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ canvas —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π"""
        def update_display():
            canvas.delete("all")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas
            canvas_width = canvas.winfo_width()
            canvas_height = canvas.winfo_height()
            
            if canvas_width <= 1 or canvas_height <= 1:
                # –ï—Å–ª–∏ canvas –µ—â–µ –Ω–µ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 100ms
                self.root.after(100, lambda: self.display_image_on_canvas(image, canvas))
                return
            
            # –†–µ—Å–∞–π–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
            img_width, img_height = image.size
            ratio = min(canvas_width/img_width, canvas_height/img_height)
            new_size = (int(img_width * ratio), int(img_height * ratio))
            
            resized_image = image.resize(new_size, Image.Resampling.LANCZOS)
            photo = ImageTk.PhotoImage(resized_image)
            
            # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            x = (canvas_width - new_size[0]) // 2
            y = (canvas_height - new_size[1]) // 2
            
            canvas.create_image(x, y, anchor=tk.NW, image=photo)
            canvas.image = photo  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ GUI
        self.root.after(0, update_display)
    
    def show_mask_preview(self, mask_image):
        """–ü–æ–∫–∞–∑ –ø—Ä–µ–≤—å—é –º–∞—Å–∫–∏"""
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –º–∞—Å–∫–∏
        mask_window = tk.Toplevel(self.root)
        mask_window.title("Segmentation Mask Preview")
        mask_window.geometry("400x500")
        
        mask_canvas = tk.Canvas(mask_window, bg="#2d2d30")
        mask_canvas.pack(expand=True, fill=tk.BOTH, padx=10, pady=10)
        
        self.display_image_on_canvas(mask_image, mask_canvas)
    
    def auto_save_result(self, result_image, background_type):
        """–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        try:
            os.makedirs("outputs", exist_ok=True)
            
            if hasattr(self, 'current_image'):
                base_name = os.path.basename(self.current_image).split('.')[0]
                filename = f"outputs/{base_name}_{background_type}.jpg"
            else:
                filename = f"outputs/result_{background_type}_{int(time.time())}.jpg"
            
            cv2.imwrite(filename, result_image)
            print(f"üíæ Auto-saved: {filename}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Auto-save failed: {e}")
    
    def on_quality_change(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞"""
        quality = self.quality_var.get()
        self.status_var.set(f"‚öôÔ∏è Quality setting: {quality}")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        # –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞

# –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
class SimpleSegmentationApp(AdvancedSegmentationApp):
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º"""
    pass

def main():
    """–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫"""
    root = tk.Tk()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Å–µ–≥–º–µ–Ω—Ç–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
    class DummySegmentator:
        def process_image(self, image, background, custom_background=None):
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            test_img = np.ones((300, 200, 3), dtype=np.uint8) * 255
            cv2.rectangle(test_img, (50, 50), (150, 250), (100, 100, 100), -1)
            mask = np.zeros((300, 200), dtype=np.uint8)
            cv2.rectangle(mask, (50, 50), (150, 250), 255, -1)
            return mask, test_img
    
    segmentator = DummySegmentator()
    app = AdvancedSegmentationApp(root, segmentator)
    root.mainloop()

if __name__ == "__main__":
    main()