import os
import sys
import torch
import cv2
import numpy as np
from model import HumanSegmentator
from video_processor import SmartVideoProcessor
from background_generator import BackgroundGenerator
from style_classifier import StyleClassifier
import tkinter as tk
from gui import SimpleSegmentationApp

print("=" * 80)
print("üöÄ AI HUMAN SEGMENTATION - –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –°–ò–°–¢–ï–ú–ê")
print("=" * 80)
print("üß† Neural Network: U-Net with ResNet34 (Improved)")
print("üéØ Features: Real-time segmentation, AI background generation, Style detection")
print("üíª Device: Auto GPU/CPU optimization")
print("‚ö° Performance: 30+ FPS on GPU, High-quality segmentation")
print("=" * 80)

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PyTorch –∏ CUDA
    print(f"PyTorch version: {torch.__version__}")
    print(f"CUDA available: {torch.cuda.is_available()}")
    if torch.cuda.is_available():
        print(f"GPU: {torch.cuda.get_device_name()}")
        print(f"GPU Memory: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.1f} GB")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenCV
    print(f"OpenCV version: {cv2.__version__}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–ø–æ–∫
    folders = ['outputs', 'examples', 'train_data', 'models']
    for folder in folders:
        os.makedirs(folder, exist_ok=True)
        print(f"‚úÖ –ü–∞–ø–∫–∞ {folder}/ —Å–æ–∑–¥–∞–Ω–∞")
    
    return True

def show_main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("\nüéÆ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ")
    print("1. üñºÔ∏è  –ó–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (GUI)")
    print("2. üé•  –í–∏–¥–µ–æ-–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã")
    print("3. üé®  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ–Ω–æ–≤ –ø–æ –ø—Ä–æ–º–ø—Ç—É")
    print("4. üß†  –î–æ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏")
    print("5. üëî  –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∏–ª–µ–π")
    print("6. üß™  –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã")
    print("7. üìä  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
    print("0. ‚ùå  –í—ã—Ö–æ–¥")
    
    while True:
        try:
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (0-7): ").strip()
            if choice in ['0', '1', '2', '3', '4', '5', '6', '7']:
                return int(choice)
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            sys.exit(0)

def launch_gui():
    """–ó–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    print("\nüñºÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    model_path = 'improved_model.pth' if os.path.exists('improved_model.pth') else None
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç–∞—Ç–æ—Ä
    segmentator = HumanSegmentator(model_path=model_path, model_type="improved" if model_path else "basic")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º GUI
    root = tk.Tk()
    app = SimpleSegmentationApp(root, segmentator)
    root.mainloop()

def launch_video_processing():
    """–ó–∞–ø—É—Å–∫ –≤–∏–¥–µ–æ-–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã"""
    print("\nüé• –ó–∞–ø—É—Å–∫ –≤–∏–¥–µ–æ-–æ–±—Ä–∞–±–æ—Ç–∫–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–µ–±-–∫–∞–º–µ—Ä—ã
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("‚ùå –í–µ–±-–∫–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")
        return
    cap.release()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    model_path = 'improved_model.pth' if os.path.exists('improved_model.pth') else None
    
    # –°–æ–∑–¥–∞–µ–º —É–º–Ω—ã–π –≤–∏–¥–µ–æ-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    try:
        processor = SmartVideoProcessor(model_path=model_path)
        print("‚úÖ –í–∏–¥–µ–æ-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print("\nüéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:")
        print("   - 'q' - –≤—ã—Ö–æ–¥")
        print("   - 'b' - —Å–º–µ–Ω–∞ —Ñ–æ–Ω–∞")
        print("   - 'c' - –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ–Ω")
        print("   - –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —Ñ–æ–Ω–∞ –ø–æ —Å—Ç–∏–ª—é –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥")
        
        processor.start_webcam()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–∏–¥–µ–æ-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {e}")

def launch_background_generation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ–Ω–æ–≤ –ø–æ –ø—Ä–æ–º–ø—Ç—É"""
    print("\nüé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ–Ω–æ–≤ –ø–æ –ø—Ä–æ–º–ø—Ç—É...")
    
    try:
        generator = BackgroundGenerator()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        demo_prompts = [
            "modern office background with glass windows",
            "cozy coffee shop interior",
            "futuristic cyberpunk city at night",
            "beautiful beach with palm trees",
            "luxury hotel lobby with marble floor"
        ]
        
        print("\nüß™ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ-—Ñ–æ–Ω–æ–≤...")
        for i, prompt in enumerate(demo_prompts):
            print(f"   {i+1}. {prompt}")
            background = generator.generate_from_prompt(prompt, size=(512, 512))
            background.save(f"examples/generated_bg_{i+1}.jpg")
        
        print("\n‚úÖ –î–µ–º–æ-—Ñ–æ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ examples/")
        print("üí° –í GUI –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ–Ω'")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ–Ω–æ–≤: {e}")

def launch_model_training():
    """–ó–∞–ø—É—Å–∫ –¥–æ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    print("\nüß† –î–æ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    if not os.path.exists('train_data/images') or len(os.listdir('train_data/images')) == 0:
        print("‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (–æ–ø—Ü–∏—è 6) –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö")
        return
    
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–æ–±—É—á–µ–Ω–∏–µ...")
    print("‚ö†Ô∏è  –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç 30 –º–∏–Ω—É—Ç –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å–æ–≤")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
        from train_improved_segmentation import train_model
        train_model()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")

def test_style_classifier():
    """–¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∏–ª–µ–π –æ–¥–µ–∂–¥—ã"""
    print("\nüëî –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∏–ª–µ–π...")
    
    try:
        classifier = StyleClassifier()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        test_img = np.ones((300, 200, 3), dtype=np.uint8) * 255
        
        # –†–∏—Å—É–µ–º "–¥–µ–ª–æ–≤–æ–π" —Å–∏–ª—É—ç—Ç (–ø–∏–¥–∂–∞–∫)
        cv2.rectangle(test_img, (80, 50), (120, 250), (0, 0, 0), -1)  # –ì–∞–ª—Å—Ç—É–∫/—Ä—É–±–∞—à–∫–∞
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∏–ª—å
        style, confidence = classifier.predict_style(test_img)
        recommended_bg, detected_style, conf = classifier.get_recommended_background(test_img)
        
        print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        print(f"   - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å: {detected_style}")
        print(f"   - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {conf:.2f}")
        print(f"   - –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω: {recommended_bg}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        cv2.imwrite("examples/style_test.jpg", test_img)
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: examples/style_test.jpg")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞: {e}")

def quick_system_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüß™ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        # 1. –¢–µ—Å—Ç —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏...")
        model_path = 'improved_model.pth' if os.path.exists('improved_model.pth') else None
        segmentator = HumanSegmentator(model_path=model_path)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        test_img = np.ones((400, 300, 3), dtype=np.uint8) * 255
        cv2.rectangle(test_img, (100, 100), (200, 300), (100, 100, 100), -1)
        
        mask, result = segmentator.process_image(test_img, "gradient")
        cv2.imwrite("examples/quick_test_result.jpg", cv2.cvtColor(result, cv2.COLOR_RGB2BGR))
        print("   ‚úÖ –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # 2. –¢–µ—Å—Ç –≤–∏–¥–µ–æ-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        print("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
        processor = SmartVideoProcessor(model_path=model_path)
        print("   ‚úÖ –í–∏–¥–µ–æ-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # 3. –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ñ–æ–Ω–æ–≤
        print("3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ñ–æ–Ω–æ–≤...")
        generator = BackgroundGenerator()
        test_bg = generator.generate_from_prompt("test", size=(100, 100))
        print("   ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–æ–Ω–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # 4. –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∏–ª–µ–π
        print("4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∏–ª–µ–π...")
        classifier = StyleClassifier()
        style, confidence = classifier.predict_style(test_img)
        print(f"   ‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∏–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç ({style}, {confidence:.2f})")
        
        print("\nüéâ –í–°–ï –°–ò–°–¢–ï–ú–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        print("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –≤ –ø–∞–ø–∫–µ examples/")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def show_system_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
    print("\nüìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï")
    
    # –ê–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ
    print("\nüíª –ê–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ:")
    print(f"   - –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {torch.get_num_threads()} –ø–æ—Ç–æ–∫–æ–≤")
    print(f"   - PyTorch device: {torch.device('cuda' if torch.cuda.is_available() else 'cpu')}")
    if torch.cuda.is_available():
        print(f"   - GPU: {torch.cuda.get_device_name(0)}")
        print(f"   - GPU Memory: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.1f} GB")
    
    # –ú–æ–¥–µ–ª–∏
    print("\nüß† –ú–æ–¥–µ–ª–∏ AI:")
    models = {
        "–£–ª—É—á—à–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏": "improved_model.pth",
        "–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏": "model.py",
        "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∏–ª–µ–π": "style_classifier.pth",
        "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–æ–Ω–æ–≤": "Stable Diffusion"
    }
    
    for name, path in models.items():
        if path.endswith('.pth'):
            exists = os.path.exists(path)
            status = "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞" if exists else "‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–∞"
        else:
            status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞"
        print(f"   - {name}: {status}")
    
    # –î–∞–Ω–Ω—ã–µ
    print("\nüìÅ –î–∞–Ω–Ω—ã–µ:")
    data_folders = ['outputs/', 'examples/', 'train_data/']
    for folder in data_folders:
        file_count = len([f for f in os.listdir(folder) if os.path.isfile(os.path.join(folder, f))]) if os.path.exists(folder) else 0
        print(f"   - {folder}: {file_count} —Ñ–∞–π–ª–æ–≤")
    
    # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    print("\n‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
    print("   - –û–∂–∏–¥–∞–µ–º—ã–π FPS –Ω–∞ CPU: 10-15")
    print("   - –û–∂–∏–¥–∞–µ–º—ã–π FPS –Ω–∞ GPU: 30+")
    print("   - –ö–∞—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏: –í—ã—Å–æ–∫–æ–µ (512x512)")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if not check_environment():
            return
        
        print("\nüéØ –î–û–°–¢–£–ü–ù–´–ï –†–ï–ñ–ò–ú–´ –†–ê–ë–û–¢–´:")
        
        while True:
            choice = show_main_menu()
            
            if choice == 0:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –£–¥–∞—á–∏ –Ω–∞ —Ö–∞–∫–∞—Ç–æ–Ω–µ! üöÄ")
                break
            elif choice == 1:
                launch_gui()
            elif choice == 2:
                launch_video_processing()
            elif choice == 3:
                launch_background_generation()
            elif choice == 4:
                launch_model_training()
            elif choice == 5:
                test_style_classifier()
            elif choice == 6:
                quick_system_test()
            elif choice == 7:
                show_system_info()
            
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
    
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")

if __name__ == "__main__":
    main()