import torch
from diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler
from PIL import Image
import cv2
import numpy as np
import os

class BackgroundGenerator:
    def __init__(self):
        self.device = "cuda" if torch.cuda.is_available() else "cpu"
        self.pipe = None
        self.load_model()
    
    def load_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Stable Diffusion"""
        print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ Stable Diffusion...")
        
        try:
            self.pipe = StableDiffusionPipeline.from_pretrained(
                "runwayml/stable-diffusion-v1-5",
                torch_dtype=torch.float16 if self.device == "cuda" else torch.float32,
                safety_checker=None,
                requires_safety_checker=False
            )
            
            if self.device == "cuda":
                self.pipe = self.pipe.to("cuda")
                # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                self.pipe.scheduler = DPMSolverMultistepScheduler.from_config(
                    self.pipe.scheduler.config
                )
                self.pipe.enable_attention_slicing()
            
            print("‚úÖ Stable Diffusion –∑–∞–≥—Ä—É–∂–µ–Ω!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Stable Diffusion: {e}")
            print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥...")
            self.pipe = None
    
    def generate_from_prompt(self, prompt, size=(512, 512), num_inference_steps=20):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ–Ω–∞ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é"""
        if self.pipe is None:
            return self._generate_fallback_background(size)
        
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image = self.pipe(
                prompt,
                height=size[0],
                width=size[1],
                num_inference_steps=num_inference_steps,
                guidance_scale=7.5
            ).images[0]
            
            return image
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return self._generate_fallback_background(size)
    
    def _generate_fallback_background(self, size):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ–Ω–∞"""
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        background = np.zeros((size[0], size[1], 3), dtype=np.uint8)
        
        for i in range(size[0]):
            # –ö—Ä–∞—Å–∏–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
            r = int(128 + 127 * np.sin(i * 0.02))
            g = int(128 + 127 * np.sin(i * 0.03 + 2))
            b = int(128 + 127 * np.sin(i * 0.04 + 4))
            background[i, :] = [b, g, r]
        
        return Image.fromarray(background)
    
    def generate_for_style(self, style_type):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ–Ω–∞ –ø–æ —Ç–∏–ø—É —Å—Ç–∏–ª—è"""
        style_prompts = {
            "–¥–µ–ª–æ–≤–æ–π": "professional office background, modern workspace, clean and professional",
            "–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π": "coffee shop interior, comfortable casual background",
            "—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π": "modern gym interior, fitness center background",
            "—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π": "elegant event hall, luxury venue background",
            "—É–ª–∏—á–Ω—ã–π": "urban city street, modern architecture background",
            "–ø—Ä–∏—Ä–æ–¥–∞": "beautiful natural landscape, park background"
        }
        
        prompt = style_prompts.get(style_type, "beautiful abstract background")
        return self.generate_from_prompt(prompt)

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
def add_background_generation_to_gui():
    """–î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ GUI"""